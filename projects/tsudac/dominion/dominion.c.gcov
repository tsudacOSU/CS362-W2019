        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/*******************************
        -:    9: * Prototypes for refactored
        -:   10: * functions, assignment 2
        -:   11: * ****************************/
        -:   12:int refacSmithy(int cp, struct gameState *s, int hp);
        -:   13:int refacAdventurer(int cp, struct gameState *s, int th[], int dt);
        -:   14:int refacCutpurse(int cp, struct gameState *s, int hp);
        -:   15:int refacAmbassador(int cp, struct gameState *s, int hp, int c1, int c2);
        -:   16:int refacEmbargo(int cp, struct gameState *s, int hp, int c1);
        -:   17:
        -:   18:
   112500:   19:int compare(const void* a, const void* b) {
   112500:   20:  if (*(int*)a > *(int*)b)
    #####:   21:    return 1;
   112500:   22:  if (*(int*)a < *(int*)b)
    30000:   23:    return -1;
    82500:   24:  return 0;
        -:   25:}
        -:   26:
    #####:   27:struct gameState* newGame() {
    #####:   28:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   29:  return g;
        -:   30:}
        -:   31:
    #####:   32:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   33:		  int k8, int k9, int k10) {
    #####:   34:  int* k = malloc(10 * sizeof(int));
    #####:   35:  k[0] = k1;
    #####:   36:  k[1] = k2;
    #####:   37:  k[2] = k3;
    #####:   38:  k[3] = k4;
    #####:   39:  k[4] = k5;
    #####:   40:  k[5] = k6;
    #####:   41:  k[6] = k7;
    #####:   42:  k[7] = k8;
    #####:   43:  k[8] = k9;
    #####:   44:  k[9] = k10;
    #####:   45:  return k;
        -:   46:}
        -:   47:
     3000:   48:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   49:		   struct gameState *state) {
        -:   50:
        -:   51:  int i;
        -:   52:  int j;
        -:   53:  int it;			
        -:   54:  //set up random number generator
     3000:   55:  SelectStream(1);
     3000:   56:  PutSeed((long)randomSeed);
        -:   57:  
        -:   58:  //check number of players
     3000:   59:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   60:    {
    #####:   61:      return -1;
        -:   62:    }
        -:   63:
        -:   64:  //set number of players
     3000:   65:  state->numPlayers = numPlayers;
        -:   66:
        -:   67:  //check selected kingdom cards are different
    33000:   68:  for (i = 0; i < 10; i++)
        -:   69:    {
   330000:   70:      for (j = 0; j < 10; j++)
        -:   71:        {
   300000:   72:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   73:	    {
    #####:   74:	      return -1;
        -:   75:	    }
        -:   76:        }
        -:   77:    }
        -:   78:
        -:   79:
        -:   80:  //initialize supply
        -:   81:  ///////////////////////////////
        -:   82:
        -:   83:  //set number of Curse cards
     3000:   84:  if (numPlayers == 2)
        -:   85:    {
     1500:   86:      state->supplyCount[curse] = 10;
        -:   87:    }
     1500:   88:  else if (numPlayers == 3)
        -:   89:    {
     1500:   90:      state->supplyCount[curse] = 20;
        -:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[curse] = 30;
        -:   95:    }
        -:   96:
        -:   97:  //set number of Victory cards
     3000:   98:  if (numPlayers == 2)
        -:   99:    {
     1500:  100:      state->supplyCount[estate] = 8;
     1500:  101:      state->supplyCount[duchy] = 8;
     1500:  102:      state->supplyCount[province] = 8;
        -:  103:    }
        -:  104:  else
        -:  105:    {
     1500:  106:      state->supplyCount[estate] = 12;
     1500:  107:      state->supplyCount[duchy] = 12;
     1500:  108:      state->supplyCount[province] = 12;
        -:  109:    }
        -:  110:
        -:  111:  //set number of Treasure cards
     3000:  112:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     3000:  113:  state->supplyCount[silver] = 40;
     3000:  114:  state->supplyCount[gold] = 30;
        -:  115:
        -:  116:  //set number of Kingdom cards
    63000:  117:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  118:    {
   502021:  119:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  120:	{
   470620:  121:	  if (kingdomCards[j] == i)
        -:  122:	    {
        -:  123:	      //check if card is a 'Victory' Kingdom card
    28599:  124:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  125:		{
     5660:  126:		  if (numPlayers == 2){ 
     1412:  127:		    state->supplyCount[i] = 8; 
        -:  128:		  }
     1418:  129:		  else{ state->supplyCount[i] = 12; }
        -:  130:		}
        -:  131:	      else
        -:  132:		{
    25769:  133:		  state->supplyCount[i] = 10;
        -:  134:		}
    28599:  135:	      break;
        -:  136:	    }
        -:  137:	  else    //card is not in the set choosen for the game
        -:  138:	    {
   442021:  139:	      state->supplyCount[i] = -1;
        -:  140:	    }
        -:  141:	}
        -:  142:
        -:  143:    }
        -:  144:
        -:  145:  ////////////////////////
        -:  146:  //supply intilization complete
        -:  147:
        -:  148:  //set player decks
    10500:  149:  for (i = 0; i < numPlayers; i++)
        -:  150:    {
     7500:  151:      state->deckCount[i] = 0;
    30000:  152:      for (j = 0; j < 3; j++)
        -:  153:	{
    22500:  154:	  state->deck[i][j] = estate;
    22500:  155:	  state->deckCount[i]++;
        -:  156:	}
    60000:  157:      for (j = 3; j < 10; j++)
        -:  158:	{
    52500:  159:	  state->deck[i][j] = copper;
    52500:  160:	  state->deckCount[i]++;		
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //shuffle player decks
    10500:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {
     7500:  167:      if ( shuffle(i, state) < 0 )
        -:  168:	{
    #####:  169:	  return -1;
        -:  170:	}
        -:  171:    }
        -:  172:
        -:  173:  //draw player hands
    10500:  174:  for (i = 0; i < numPlayers; i++)
        -:  175:    {  
        -:  176:      //initialize hand size to zero
     7500:  177:      state->handCount[i] = 0;
     7500:  178:      state->discardCount[i] = 0;
        -:  179:      //draw 5 cards
        -:  180:      // for (j = 0; j < 5; j++)
        -:  181:      //	{
        -:  182:      //	  drawCard(i, state);
        -:  183:      //	}
        -:  184:    }
        -:  185:  
        -:  186:  //set embargo tokens to 0 for all supply piles
    84000:  187:  for (i = 0; i <= treasure_map; i++)
        -:  188:    {
    81000:  189:      state->embargoTokens[i] = 0;
        -:  190:    }
        -:  191:
        -:  192:  //initialize first player's turn
     3000:  193:  state->outpostPlayed = 0;
     3000:  194:  state->phase = 0;
     3000:  195:  state->numActions = 1;
     3000:  196:  state->numBuys = 1;
     3000:  197:  state->playedCardCount = 0;
     3000:  198:  state->whoseTurn = 0;
     3000:  199:  state->handCount[state->whoseTurn] = 0;
        -:  200:  //int it; move to top
        -:  201:
        -:  202:  //Moved draw cards to here, only drawing at the start of a turn
    18000:  203:  for (it = 0; it < 5; it++){
    15000:  204:    drawCard(state->whoseTurn, state);
        -:  205:  }
        -:  206:
     3000:  207:  updateCoins(state->whoseTurn, state, 0);
        -:  208:
     3000:  209:  return 0;
        -:  210:}
        -:  211:
     7500:  212:int shuffle(int player, struct gameState *state) {
        -:  213: 
        -:  214:
        -:  215:  int newDeck[MAX_DECK];
     7500:  216:  int newDeckPos = 0;
        -:  217:  int card;
        -:  218:  int i;
        -:  219:
     7500:  220:  if (state->deckCount[player] < 1)
    #####:  221:    return -1;
     7500:  222:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  223:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  224:
    90000:  225:  while (state->deckCount[player] > 0) {
    75000:  226:    card = floor(Random() * state->deckCount[player]);
    75000:  227:    newDeck[newDeckPos] = state->deck[player][card];
    75000:  228:    newDeckPos++;
   270000:  229:    for (i = card; i < state->deckCount[player]-1; i++) {
   195000:  230:      state->deck[player][i] = state->deck[player][i+1];
        -:  231:    }
    75000:  232:    state->deckCount[player]--;
        -:  233:  }
    82500:  234:  for (i = 0; i < newDeckPos; i++) {
    75000:  235:    state->deck[player][i] = newDeck[i];
    75000:  236:    state->deckCount[player]++;
        -:  237:  }
        -:  238:
     7500:  239:  return 0;
        -:  240:}
        -:  241:
    #####:  242:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  243:{	
        -:  244:  int card;
    #####:  245:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  246:
        -:  247:  //check if it is the right phase
    #####:  248:  if (state->phase != 0)
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //check if player has enough actions
    #####:  254:  if ( state->numActions < 1 )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //get card played
    #####:  260:  card = handCard(handPos, state);
        -:  261:	
        -:  262:  //check if selected card is an action
    #####:  263:  if ( card < adventurer || card > treasure_map )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //play card
    #####:  269:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  270:    {
    #####:  271:      return -1;
        -:  272:    }
        -:  273:	
        -:  274:  //reduce number of actions
    #####:  275:  state->numActions--;
        -:  276:
        -:  277:  //update coins (Treasure cards may be added with card draws)
    #####:  278:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  279:	
    #####:  280:  return 0;
        -:  281:}
        -:  282:
    #####:  283:int buyCard(int supplyPos, struct gameState *state) {
        -:  284:  int who;
        -:  285:  if (DEBUG){
        -:  286:    printf("Entering buyCard...\n");
        -:  287:  }
        -:  288:
        -:  289:  // I don't know what to do about the phase thing.
        -:  290:
    #####:  291:  who = state->whoseTurn;
        -:  292:
    #####:  293:  if (state->numBuys < 1){
        -:  294:    if (DEBUG)
        -:  295:      printf("You do not have any buys left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (supplyCount(supplyPos, state) <1){
        -:  298:    if (DEBUG)
        -:  299:      printf("There are not any of that type of card left\n");
    #####:  300:    return -1;
    #####:  301:  } else if (state->coins < getCost(supplyPos)){
        -:  302:    if (DEBUG) 
        -:  303:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  304:    return -1;
        -:  305:  } else {
    #####:  306:    state->phase=1;
        -:  307:    //state->supplyCount[supplyPos]--;
    #####:  308:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  309:  
    #####:  310:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  311:    state->numBuys--;
        -:  312:    if (DEBUG)
        -:  313:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  314:  }
        -:  315:
        -:  316:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  317:  //state->discardCount[who]++;
        -:  318:    
    #####:  319:  return 0;
        -:  320:}
        -:  321:
    #####:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
    #####:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
    #####:  331:int supplyCount(int card, struct gameState *state) {
    #####:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
    #####:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
        -:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
    #####:  357:int whoseTurn(struct gameState *state) {
    #####:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
    #####:  361:int endTurn(struct gameState *state) {
        -:  362:  int k;
        -:  363:  int i;
    #####:  364:  int currentPlayer = whoseTurn(state);
        -:  365:  
        -:  366:  //Discard hand
    #####:  367:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  368:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  369:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  370:  }
    #####:  371:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  372:    
        -:  373:  //Code for determining the player
    #####:  374:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  375:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  376:  }
        -:  377:  else{
    #####:  378:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  379:  }
        -:  380:
    #####:  381:  state->outpostPlayed = 0;
    #####:  382:  state->phase = 0;
    #####:  383:  state->numActions = 1;
    #####:  384:  state->coins = 0;
    #####:  385:  state->numBuys = 1;
    #####:  386:  state->playedCardCount = 0;
    #####:  387:  state->handCount[state->whoseTurn] = 0;
        -:  388:
        -:  389:  //int k; move to top
        -:  390:  //Next player draws hand
    #####:  391:  for (k = 0; k < 5; k++){
    #####:  392:    drawCard(state->whoseTurn, state);//Draw a card
        -:  393:  }
        -:  394:
        -:  395:  //Update money
    #####:  396:  updateCoins(state->whoseTurn, state , 0);
        -:  397:
    #####:  398:  return 0;
        -:  399:}
        -:  400:
    #####:  401:int isGameOver(struct gameState *state) {
        -:  402:  int i;
        -:  403:  int j;
        -:  404:	
        -:  405:  //if stack of Province cards is empty, the game ends
    #####:  406:  if (state->supplyCount[province] == 0)
        -:  407:    {
    #####:  408:      return 1;
        -:  409:    }
        -:  410:
        -:  411:  //if three supply pile are at 0, the game ends
    #####:  412:  j = 0;
    #####:  413:  for (i = 0; i < 25; i++)
        -:  414:    {
    #####:  415:      if (state->supplyCount[i] == 0)
        -:  416:	{
    #####:  417:	  j++;
        -:  418:	}
        -:  419:    }
    #####:  420:  if ( j >= 3)
        -:  421:    {
    #####:  422:      return 1;
        -:  423:    }
        -:  424:
    #####:  425:  return 0;
        -:  426:}
        -:  427:
    #####:  428:int scoreFor (int player, struct gameState *state) {
        -:  429:
        -:  430:  int i;
    #####:  431:  int score = 0;
        -:  432:  //score from hand
    #####:  433:  for (i = 0; i < state->handCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        -:  454:  //score from deck
    #####:  455:  for (i = 0; i < state->discardCount[player]; i++)
        -:  456:    {
    #####:  457:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  458:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  460:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  461:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  462:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  463:    }
        -:  464:
    #####:  465:  return score;
        -:  466:}
        -:  467:
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  469:  int i;	
        -:  470:  int j;
        -:  471:  int highScore;
        -:  472:  int currentPlayer;
        -:  473:
        -:  474:  //get score for each player
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  476:    {
        -:  477:      //set unused player scores to -9999
    #####:  478:      if (i >= state->numPlayers)
        -:  479:	{
    #####:  480:	  players[i] = -9999;
        -:  481:	}
        -:  482:      else
        -:  483:	{
    #####:  484:	  players[i] = scoreFor (i, state);
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if (players[i] > players[j])
        -:  493:	{
    #####:  494:	  j = i;
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //add 1 to players who had less turns
    #####:  500:  currentPlayer = whoseTurn(state);
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] == highScore && i > currentPlayer )
        -:  504:	{
    #####:  505:	  players[i]++;
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  //find new highest score
    #####:  510:  j = 0;
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] > players[j] )
        -:  514:	{
    #####:  515:	  j = i;
        -:  516:	}
        -:  517:    }
    #####:  518:  highScore = players[j];
        -:  519:
        -:  520:  //set winners in array to 1 and rest to 0
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  522:    {
    #####:  523:      if ( players[i] == highScore )
        -:  524:	{
    #####:  525:	  players[i] = 1;
        -:  526:	}
        -:  527:      else
        -:  528:	{
    #####:  529:	  players[i] = 0;
        -:  530:	}
        -:  531:    }
        -:  532:
    #####:  533:  return 0;
        -:  534:}
        -:  535:
    15000:  536:int drawCard(int player, struct gameState *state)
        -:  537:{	int count;
        -:  538:  int deckCounter;
    15000:  539:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  540:    
        -:  541:    //Step 1 Shuffle the discard pile back into a deck
        -:  542:    int i;
        -:  543:    //Move discard to deck
    #####:  544:    for (i = 0; i < state->discardCount[player];i++){
    #####:  545:      state->deck[player][i] = state->discard[player][i];
    #####:  546:      state->discard[player][i] = -1;
        -:  547:    }
        -:  548:
    #####:  549:    state->deckCount[player] = state->discardCount[player];
    #####:  550:    state->discardCount[player] = 0;//Reset discard
        -:  551:
        -:  552:    //Shufffle the deck
    #####:  553:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  554:   
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  557:    }
        -:  558:    
    #####:  559:    state->discardCount[player] = 0;
        -:  560:
        -:  561:    //Step 2 Draw Card
    #####:  562:    count = state->handCount[player];//Get current player's hand count
        -:  563:    
        -:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:    
    #####:  568:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  569:
    #####:  570:    if (deckCounter == 0)
    #####:  571:      return -1;
        -:  572:
    #####:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  574:    state->deckCount[player]--;
    #####:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
        -:  578:  else{
    15000:  579:    int count = state->handCount[player];//Get current hand count for player
        -:  580:    int deckCounter;
        -:  581:    if (DEBUG){//Debug statements
        -:  582:      printf("Current hand count: %d\n", count);
        -:  583:    }
        -:  584:
    15000:  585:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15000:  586:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15000:  587:    state->deckCount[player]--;
    15000:  588:    state->handCount[player]++;//Increment hand count
        -:  589:  }
        -:  590:
    15000:  591:  return 0;
        -:  592:}
        -:  593:
    #####:  594:int getCost(int cardNumber)
        -:  595:{
    #####:  596:  switch( cardNumber ) 
        -:  597:    {
        -:  598:    case curse:
    #####:  599:      return 0;
        -:  600:    case estate:
    #####:  601:      return 2;
        -:  602:    case duchy:
    #####:  603:      return 5;
        -:  604:    case province:
    #####:  605:      return 8;
        -:  606:    case copper:
    #####:  607:      return 0;
        -:  608:    case silver:
    #####:  609:      return 3;
        -:  610:    case gold:
    #####:  611:      return 6;
        -:  612:    case adventurer:
    #####:  613:      return 6;
        -:  614:    case council_room:
    #####:  615:      return 5;
        -:  616:    case feast:
    #####:  617:      return 4;
        -:  618:    case gardens:
    #####:  619:      return 4;
        -:  620:    case mine:
    #####:  621:      return 5;
        -:  622:    case remodel:
    #####:  623:      return 4;
        -:  624:    case smithy:
    #####:  625:      return 4;
        -:  626:    case village:
    #####:  627:      return 3;
        -:  628:    case baron:
    #####:  629:      return 4;
        -:  630:    case great_hall:
    #####:  631:      return 3;
        -:  632:    case minion:
    #####:  633:      return 5;
        -:  634:    case steward:
    #####:  635:      return 3;
        -:  636:    case tribute:
    #####:  637:      return 5;
        -:  638:    case ambassador:
    #####:  639:      return 3;
        -:  640:    case cutpurse:
    #####:  641:      return 4;
        -:  642:    case embargo: 
    #####:  643:      return 2;
        -:  644:    case outpost:
    #####:  645:      return 5;
        -:  646:    case salvager:
    #####:  647:      return 4;
        -:  648:    case sea_hag:
    #####:  649:      return 4;
        -:  650:    case treasure_map:
    #####:  651:      return 4;
        -:  652:    }
        -:  653:	
    #####:  654:  return -1;
        -:  655:}
        -:  656:
    #####:  657:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  658:{
        -:  659:  int i;
        -:  660:  int j;
        -:  661:  int k;
        -:  662:  int x;
        -:  663:  int index;
    #####:  664:  int currentPlayer = whoseTurn(state);
    #####:  665:  int nextPlayer = currentPlayer + 1;
        -:  666:
    #####:  667:  int tributeRevealedCards[2] = {-1, -1};
        -:  668:  int temphand[MAX_HAND];// moved above the if statement
    #####:  669:  int drawntreasure=0;
        -:  670:  int cardDrawn;
    #####:  671:  int z = 0;// this is the counter for the temp hand
    #####:  672:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  673:    nextPlayer = 0;
        -:  674:  }
        -:  675:  
        -:  676:	
        -:  677:  //uses switch to select card and perform actions
    #####:  678:  switch( card ) 
        -:  679:    {
        -:  680:    case adventurer:
    #####:  681:     return refacAdventurer(currentPlayer, state, temphand, drawntreasure);
        -:  682:
        -:  683:/***************************************************************
        -:  684:        while(drawntreasure<2){
        -:  685:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  686:	  shuffle(currentPlayer, state);
        -:  687:	}
        -:  688:	drawCard(currentPlayer, state);
        -:  689:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  690:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  691:	  drawntreasure++;
        -:  692:	else{
        -:  693:	  temphand[z]=cardDrawn;
        -:  694:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  695:	  z++;
        -:  696:	}
        -:  697:      }
        -:  698:      while(z-1>=0){
        -:  699:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  700:	z=z-1;
        -:  701:      }
        -:  702:      return 0;
        -:  703:****************************************************************/	
        -:  704:
        -:  705:    case council_room:
        -:  706:      //+4 Cards
    #####:  707:      for (i = 0; i < 4; i++)
        -:  708:	{
    #####:  709:	  drawCard(currentPlayer, state);
        -:  710:	}
        -:  711:			
        -:  712:      //+1 Buy
    #####:  713:      state->numBuys++;
        -:  714:			
        -:  715:      //Each other player draws a card
    #####:  716:      for (i = 0; i < state->numPlayers; i++)
        -:  717:	{
    #####:  718:	  if ( i != currentPlayer )
        -:  719:	    {
    #####:  720:	      drawCard(i, state);
        -:  721:	    }
        -:  722:	}
        -:  723:			
        -:  724:      //put played card in played card pile
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
        -:  726:			
    #####:  727:      return 0;
        -:  728:			
        -:  729:    case feast:
        -:  730:      //gain card with cost up to 5
        -:  731:      //Backup hand
    #####:  732:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  733:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  734:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  735:      }
        -:  736:      //Backup hand
        -:  737:
        -:  738:      //Update Coins for Buy
    #####:  739:      updateCoins(currentPlayer, state, 5);
    #####:  740:      x = 1;//Condition to loop on
    #####:  741:      while( x == 1) {//Buy one card
    #####:  742:	if (supplyCount(choice1, state) <= 0){
        -:  743:	  if (DEBUG)
        -:  744:	    printf("None of that card left, sorry!\n");
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:	  }
        -:  749:	}
    #####:  750:	else if (state->coins < getCost(choice1)){
    #####:  751:	  printf("That card is too expensive!\n");
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:	  }
        -:  756:	}
        -:  757:	else{
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:	  }
        -:  762:
    #####:  763:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  764:	  x = 0;//No more buying cards
        -:  765:
        -:  766:	  if (DEBUG){
        -:  767:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  768:	  }
        -:  769:
        -:  770:	}
        -:  771:      }     
        -:  772:
        -:  773:      //Reset Hand
    #####:  774:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  775:	state->hand[currentPlayer][i] = temphand[i];
    #####:  776:	temphand[i] = -1;
        -:  777:      }
        -:  778:      //Reset Hand
        -:  779:      			
    #####:  780:      return 0;
        -:  781:			
        -:  782:    case gardens:
    #####:  783:      return -1;
        -:  784:			
        -:  785:    case mine:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  789:	{
    #####:  790:	  return -1;
        -:  791:	}
        -:  792:		
    #####:  793:      if (choice2 > treasure_map || choice2 < curse)
        -:  794:	{
    #####:  795:	  return -1;
        -:  796:	}
        -:  797:
    #####:  798:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  799:	{
    #####:  800:	  return -1;
        -:  801:	}
        -:  802:
    #####:  803:      gainCard(choice2, state, 2, currentPlayer);
        -:  804:
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:
        -:  808:      //discard trashed card
    #####:  809:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  810:	{
    #####:  811:	  if (state->hand[currentPlayer][i] == j)
        -:  812:	    {
    #####:  813:	      discardCard(i, currentPlayer, state, 0);			
    #####:  814:	      break;
        -:  815:	    }
        -:  816:	}
        -:  817:			
    #####:  818:      return 0;
        -:  819:			
        -:  820:    case remodel:
    #####:  821:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 0, currentPlayer);
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
    #####:  839:	      break;
        -:  840:	    }
        -:  841:	}
        -:  842:
        -:  843:
    #####:  844:      return 0;
        -:  845:		
        -:  846:    case smithy:
    #####:  847:      return refacSmithy(currentPlayer, state, handPos);
        -:  848:/***************************************************************************
        -:  849: * refactored code, moved to refacSmithy     
        -:  850:      //+3 Cards
        -:  851:      for (i = 0; i < 3; i++)
        -:  852:	{
        -:  853:	  drawCard(currentPlayer, state);
        -:  854:	}
        -:  855:			
        -:  856:      //discard card from hand
        -:  857:      discardCard(handPos, currentPlayer, state, 0);
        -:  858:      return 0;
        -:  859:****************************************************************************/	
        -:  860:
        -:  861:    case village:
        -:  862:      //+1 Card
    #####:  863:      drawCard(currentPlayer, state);
        -:  864:			
        -:  865:      //+2 Actions
    #####:  866:      state->numActions = state->numActions + 2;
        -:  867:			
        -:  868:      //discard played card from hand
    #####:  869:      discardCard(handPos, currentPlayer, state, 0);
    #####:  870:      return 0;
        -:  871:		
        -:  872:    case baron:
    #####:  873:      state->numBuys++;//Increase buys by 1!
    #####:  874:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  875:	int p = 0;//Iterator for hand!
    #####:  876:	int card_not_discarded = 1;//Flag for discard set!
    #####:  877:	while(card_not_discarded){
    #####:  878:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  879:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  880:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  881:	    state->discardCount[currentPlayer]++;
    #####:  882:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  883:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  884:	    }
    #####:  885:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  886:	    state->handCount[currentPlayer]--;
    #####:  887:	    card_not_discarded = 0;//Exit the loop
        -:  888:	  }
    #####:  889:	  else if (p > state->handCount[currentPlayer]){
        -:  890:	    if(DEBUG) {
        -:  891:	      printf("No estate cards in your hand, invalid choice\n");
        -:  892:	      printf("Must gain an estate if there are any\n");
        -:  893:	    }
    #####:  894:	    if (supplyCount(estate, state) > 0){
    #####:  895:	      gainCard(estate, state, 0, currentPlayer);
    #####:  896:	      state->supplyCount[estate]--;//Decrement estates
    #####:  897:	      if (supplyCount(estate, state) == 0){
    #####:  898:		isGameOver(state);
        -:  899:	      }
        -:  900:	    }
    #####:  901:	    card_not_discarded = 0;//Exit the loop
        -:  902:	  }
        -:  903:			    
        -:  904:	  else{
    #####:  905:	    p++;//Next card
        -:  906:	  }
        -:  907:	}
        -:  908:      }
        -:  909:			    
        -:  910:      else{
    #####:  911:	if (supplyCount(estate, state) > 0){
    #####:  912:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  913:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  914:	  if (supplyCount(estate, state) == 0){
    #####:  915:	    isGameOver(state);
        -:  916:	  }
        -:  917:	}
        -:  918:      }
        -:  919:	    
        -:  920:      
    #####:  921:      return 0;
        -:  922:		
        -:  923:    case great_hall:
        -:  924:      //+1 Card
    #####:  925:      drawCard(currentPlayer, state);
        -:  926:			
        -:  927:      //+1 Actions
    #####:  928:      state->numActions++;
        -:  929:			
        -:  930:      //discard card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
    #####:  932:      return 0;
        -:  933:		
        -:  934:    case minion:
        -:  935:      //+1 action
    #####:  936:      state->numActions++;
        -:  937:			
        -:  938:      //discard card from hand
    #####:  939:      discardCard(handPos, currentPlayer, state, 0);
        -:  940:			
    #####:  941:      if (choice1)		//+2 coins
        -:  942:	{
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:			
    #####:  946:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  947:	{
        -:  948:	  //discard hand
    #####:  949:	  while(numHandCards(state) > 0)
        -:  950:	    {
    #####:  951:	      discardCard(handPos, currentPlayer, state, 0);
        -:  952:	    }
        -:  953:				
        -:  954:	  //draw 4
    #####:  955:	  for (i = 0; i < 4; i++)
        -:  956:	    {
    #####:  957:	      drawCard(currentPlayer, state);
        -:  958:	    }
        -:  959:				
        -:  960:	  //other players discard hand and redraw if hand size > 4
    #####:  961:	  for (i = 0; i < state->numPlayers; i++)
        -:  962:	    {
    #####:  963:	      if (i != currentPlayer)
        -:  964:		{
    #####:  965:		  if ( state->handCount[i] > 4 )
        -:  966:		    {
        -:  967:		      //discard hand
    #####:  968:		      while( state->handCount[i] > 0 )
        -:  969:			{
    #####:  970:			  discardCard(handPos, i, state, 0);
        -:  971:			}
        -:  972:							
        -:  973:		      //draw 4
    #####:  974:		      for (j = 0; j < 4; j++)
        -:  975:			{
    #####:  976:			  drawCard(i, state);
        -:  977:			}
        -:  978:		    }
        -:  979:		}
        -:  980:	    }
        -:  981:				
        -:  982:	}
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case steward:
    #####:  986:      if (choice1 == 1)
        -:  987:	{
        -:  988:	  //+2 cards
    #####:  989:	  drawCard(currentPlayer, state);
    #####:  990:	  drawCard(currentPlayer, state);
        -:  991:	}
    #####:  992:      else if (choice1 == 2)
        -:  993:	{
        -:  994:	  //+2 coins
    #####:  995:	  state->coins = state->coins + 2;
        -:  996:	}
        -:  997:      else
        -:  998:	{
        -:  999:	  //trash 2 cards in hand
    #####: 1000:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1001:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1002:	}
        -: 1003:			
        -: 1004:      //discard card from hand
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1006:      return 0;
        -: 1007:		
        -: 1008:    case tribute:
    #####: 1009:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1010:	if (state->deckCount[nextPlayer] > 0){
    #####: 1011:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1012:	  state->deckCount[nextPlayer]--;
        -: 1013:	}
    #####: 1014:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1015:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1016:	  state->discardCount[nextPlayer]--;
        -: 1017:	}
        -: 1018:	else{
        -: 1019:	  //No Card to Reveal
        -: 1020:	  if (DEBUG){
        -: 1021:	    printf("No cards to reveal\n");
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:	    
        -: 1026:      else{
    #####: 1027:	if (state->deckCount[nextPlayer] == 0){
    #####: 1028:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1029:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1030:	    state->deckCount[nextPlayer]++;
    #####: 1031:	    state->discard[nextPlayer][i] = -1;
    #####: 1032:	    state->discardCount[nextPlayer]--;
        -: 1033:	  }
        -: 1034:			    
    #####: 1035:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1036:	} 
    #####: 1037:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1038:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1039:	state->deckCount[nextPlayer]--;
    #####: 1040:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
        -: 1043:      }    
        -: 1044:		       
    #####: 1045:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1046:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1047:	state->playedCardCount++;
    #####: 1048:	tributeRevealedCards[1] = -1;
        -: 1049:      }
        -: 1050:
    #####: 1051:      for (i = 0; i <= 2; i ++){
    #####: 1052:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1053:	  state->coins += 2;
        -: 1054:	}
        -: 1055:		    
    #####: 1056:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1057:	  drawCard(currentPlayer, state);
    #####: 1058:	  drawCard(currentPlayer, state);
        -: 1059:	}
        -: 1060:	else{//Action Card
    #####: 1061:	  state->numActions = state->numActions + 2;
        -: 1062:	}
        -: 1063:      }
        -: 1064:	    
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case ambassador:
    #####: 1068:      return refacAmbassador(currentPlayer, state, handPos, choice1, choice2);
        -: 1069:/**********************************************************************************
        -: 1070: * yanked code, moved to refacAmbassador
        -: 1071:
        -: 1072:      j = 0;		//used to check if player has enough cards to discard
        -: 1073:
        -: 1074:      if (choice2 > 2 || choice2 < 0)
        -: 1075:	{
        -: 1076:	  return -1;				
        -: 1077:	}
        -: 1078:
        -: 1079:      if (choice1 == handPos)
        -: 1080:	{
        -: 1081:	  return -1;
        -: 1082:	}
        -: 1083:
        -: 1084:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1085:	{
        -: 1086:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1087:	    {
        -: 1088:	      j++;
        -: 1089:	    }
        -: 1090:	}
        -: 1091:      if (j < choice2)
        -: 1092:	{
        -: 1093:	  return -1;				
        -: 1094:	}
        -: 1095:
        -: 1096:      if (DEBUG) 
        -: 1097:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1098:
        -: 1099:      //increase supply count for choosen card by amount being discarded
        -: 1100:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1101:			
        -: 1102:      //each other player gains a copy of revealed card
        -: 1103:      for (i = 0; i < state->numPlayers; i++)
        -: 1104:	{
        -: 1105:	  if (i != currentPlayer)
        -: 1106:	    {
        -: 1107:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1108:	    }
        -: 1109:	}
        -: 1110:
        -: 1111:      //discard played card from hand
        -: 1112:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1113:
        -: 1114:      //trash copies of cards returned to supply
        -: 1115:      for (j = 0; j < choice2; j++)
        -: 1116:	{
        -: 1117:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1118:	    {
        -: 1119:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1120:		{
        -: 1121:		  discardCard(i, currentPlayer, state, 1);
        -: 1122:		  break;
        -: 1123:		}
        -: 1124:	    }
        -: 1125:	}			
        -: 1126:
        -: 1127:      return 0;
        -: 1128:		
        -: 1129:***************************************************************************************/
        -: 1130:   
        -: 1131:    case cutpurse:
    #####: 1132:      return refacCutpurse(currentPlayer, state, handPos);
        -: 1133:/**********************************************************************
        -: 1134: * yanked code, found in refac function
        -: 1135:      updateCoins(currentPlayer, state, 2);
        -: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	{
        -: 1138:	  if (i != currentPlayer)
        -: 1139:	    {
        -: 1140:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		{
        -: 1142:		  if (state->hand[i][j] == copper)
        -: 1143:		    {
        -: 1144:		      discardCard(j, i, state, 0);
        -: 1145:		      break;
        -: 1146:		    }
        -: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
        -: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
        -: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
        -: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
        -: 1165:      return 0;
        -: 1166:***********************************************************************/
        -: 1167:		
        -: 1168:    case embargo: 
    #####: 1169:      return refacEmbargo(currentPlayer, state, handPos, choice1);
        -: 1170: /*********************************************************************
        -: 1171:  * yanked code, moved to refac embargo     
        -: 1172:      //+2 Coins
        -: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
        -: 1176:      if ( state->supplyCount[choice1] == -1 )
        -: 1177:	{
        -: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
        -: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
        -: 1185:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1186:      return 0;
        -: 1187:
        -: 1188:**********************************************************************/
        -: 1189:		
        -: 1190:    case outpost:
        -: 1191:      //set outpost flag
    #####: 1192:      state->outpostPlayed++;
        -: 1193:			
        -: 1194:      //discard card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case salvager:
        -: 1199:      //+1 buy
    #####: 1200:      state->numBuys++;
        -: 1201:			
    #####: 1202:      if (choice1)
        -: 1203:	{
        -: 1204:	  //gain coins equal to trashed card
    #####: 1205:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1206:	  //trash card
    #####: 1207:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1208:	}
        -: 1209:			
        -: 1210:      //discard card
    #####: 1211:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case sea_hag:
    #####: 1215:      for (i = 0; i < state->numPlayers; i++){
    #####: 1216:	if (i != currentPlayer){
    #####: 1217:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1218:	  state->discardCount[i]++;
    #####: 1219:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1220:	}
        -: 1221:      }
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case treasure_map:
        -: 1225:      //search hand for another treasure_map
    #####: 1226:      index = -1;
    #####: 1227:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1228:	{
    #####: 1229:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1230:	    {
    #####: 1231:	      index = i;
    #####: 1232:	      break;
        -: 1233:	    }
        -: 1234:	}
    #####: 1235:      if (index > -1)
        -: 1236:	{
        -: 1237:	  //trash both treasure cards
    #####: 1238:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1239:	  discardCard(index, currentPlayer, state, 1);
        -: 1240:
        -: 1241:	  //gain 4 Gold cards
    #####: 1242:	  for (i = 0; i < 4; i++)
        -: 1243:	    {
    #####: 1244:	      gainCard(gold, state, 1, currentPlayer);
        -: 1245:	    }
        -: 1246:				
        -: 1247:	  //return success
    #####: 1248:	  return 1;
        -: 1249:	}
        -: 1250:			
        -: 1251:      //no second treasure_map found in hand
    #####: 1252:      return -1;
        -: 1253:    }
        -: 1254:	
    #####: 1255:  return -1;
        -: 1256:}
        -: 1257:
        -: 1258:/**************************************************************************************
        -: 1259:                    REFACTORED FUNCTIONS FOR ASSIGNMENT 2
        -: 1260:**************************************************************************************/
        -: 1261://accepts current player, game state, and hand position as parameters
    #####: 1262:int refacSmithy(int cp, struct gameState *s, int hp)
        -: 1263:{
        -: 1264:
        -: 1265:    //+3 Cards
    #####: 1266:    for (int i = 0; i < 3; i++)
        -: 1267:	{
    #####: 1268:	  drawCard(cp, s);
    #####: 1269:      s->handCount[cp]++; /*ASSIGNMENT 2 BUG*/
        -: 1270:	}
        -: 1271:			
        -: 1272:      //discard card from hand
    #####: 1273:      discardCard(hp, cp, s, 1); /*ASSIGNMENT 2 BUG */ 
    #####: 1274:	    return 0;
        -: 1275:}
        -: 1276:
    #####: 1277:int refacAdventurer(int cp, struct gameState *s, int th[], int dt)
        -: 1278:{
        -: 1279:
    #####: 1280:    int z = 0;
    #####: 1281:    if(dt<2){ /*ASSIGNMENT 2 BUG */
    #####: 1282:	if (s->deckCount[cp] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1283:	  shuffle(cp, s);
        -: 1284:	}
    #####: 1285:	drawCard(cp, s);
    #####: 1286:	int cardDrawn = s->hand[cp][s->handCount[cp]];//top card of hand is most recently drawn card. /* ASSIGNMENT 2 BUG*/
    #####: 1287:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1288:	  dt++;
        -: 1289:	else{
    #####: 1290:	  th[z]=cardDrawn;
    #####: 1291:	  s->handCount[cp]--; //this should just remove the top card (the most recently drawn one).
    #####: 1292:	  z++;
        -: 1293:	}
        -: 1294:      }
    #####: 1295:      while(z-1>=0){
    #####: 1296:	s->discard[cp][s->discardCount[cp]]=th[z-1]; // discard all cards in play that have been drawn /*ASSIGNMENT 2 BUG*/
    #####: 1297:	z=z-1;
        -: 1298:      }
    #####: 1299:      return 0;
        -: 1300:}
        -: 1301:
     2000: 1302:int refacCutpurse(int cp, struct gameState *s, int hp)
        -: 1303:{
        -: 1304:
     2000: 1305:      updateCoins(cp, s, 2);
     7002: 1306:      for (int i = 0; i < s->numPlayers; i++)
        -: 1307:	{
     5002: 1308:	  if (i != cp)
        -: 1309:	    {
     5603: 1310:	      for (int j = 0; j < s->handCount[i]; j++)
        -: 1311:		{
     3540: 1312:		  if (s->hand[i][j] == copper)
        -: 1313:		    {
     3299: 1314:		      discardCard(j, i, s, 0);
        -: 1315:		      //break;   /* ASSIGNMENT 2 BUG */
        -: 1316:		    }
     3540: 1317:		  if (j == s->handCount[i])
        -: 1318:		    {
      939: 1319:		      for (int k = 0; k < s->handCount[i]; k++)
        -: 1320:			{
        -: 1321:			  if (DEBUG)
        -: 1322:			    printf("Player %d reveals card number %d\n", i, s->hand[i][j]); /*ASSIGNMENT 2 BUG */
        -: 1323:			}	
      939: 1324:		      break;
        -: 1325:		    }		
        -: 1326:		}
        -: 1327:					
        -: 1328:	    }
        -: 1329:				
        -: 1330:	}				
        -: 1331:
        -: 1332:      //discard played card from hand
     2000: 1333:      discardCard(hp, cp, s, 0);			
        -: 1334:
     2000: 1335:      return 0;
        -: 1336:
        -: 1337:}
        -: 1338:
    #####: 1339:int refacAmbassador(int cp, struct gameState *s, int hp, int c1, int c2)
        -: 1340:{
        -: 1341:
    #####: 1342:      int j = 0;		//used to check if player has enough cards to discard
        -: 1343:
    #####: 1344:      if (c2 > 2 && c2 < 0) /* ASSIGNMENT 2 BUG */
        -: 1345:	{
    #####: 1346:	  return -1;				
        -: 1347:	}
        -: 1348:
    #####: 1349:      if (c1 == hp)
        -: 1350:	{
    #####: 1351:	  return -1;
        -: 1352:	}
        -: 1353:
    #####: 1354:      for (int i = 0; i < s->handCount[cp]; i++)
        -: 1355:	{
    #####: 1356:	  if (i != hp && i == s->hand[cp][c1] && i != c1)
        -: 1357:	    {
    #####: 1358:	      j++;
        -: 1359:	    }
        -: 1360:	}
    #####: 1361:      if (j < c2)
        -: 1362:	{
    #####: 1363:	  return -1;				
        -: 1364:	}
        -: 1365:
        -: 1366:      if (DEBUG) 
        -: 1367:	printf("Player %d reveals card number: %d\n", cp, s->hand[cp][c1]);
        -: 1368:
        -: 1369:      //increase supply count for choosen card by amount being discarded
    #####: 1370:      s->supplyCount[s->hand[cp][c1]] += c2;
        -: 1371:			
        -: 1372:      //each other player gains a copy of revealed card
    #####: 1373:      for (int i = 0; i < s->numPlayers; i++)
        -: 1374:	{
        -: 1375:	  //if (i != cp)  ASSIGNMENT 2 BUG
        -: 1376:	   // {
    #####: 1377:	      gainCard(s->hand[cp][c1], s, 0, i);
        -: 1378:	   // }
        -: 1379:	}
        -: 1380:
        -: 1381:      //discard played card from hand
    #####: 1382:      discardCard(hp, cp, s, 0);			
        -: 1383:
        -: 1384:      //trash copies of cards returned to supply
    #####: 1385:      for (j = 0; j < c2; j++)
        -: 1386:	{
    #####: 1387:	  for (int i = 0; i < s->handCount[cp]; i++)
        -: 1388:	    {
    #####: 1389:	      if (s->hand[cp][i] == s->hand[cp][c1])
        -: 1390:		{
    #####: 1391:		  discardCard(i, cp, s, 1);
    #####: 1392:		  break;
        -: 1393:		}
        -: 1394:	    }
        -: 1395:	}			
        -: 1396:
    #####: 1397:      return 0;
        -: 1398:}
        -: 1399:
     1000: 1400:int refacEmbargo(int cp, struct gameState *s, int hp, int c1)
        -: 1401:{
        -: 1402:
        -: 1403:      //+2 Coins
     1000: 1404:      s->coins = s->coins + 2;
        -: 1405:			
        -: 1406:      //see if selected pile is in play
     1000: 1407:      if ( s->supplyCount[c1] == -1 )
        -: 1408:	{
      450: 1409:	  return -1;
        -: 1410:	}
        -: 1411:			
        -: 1412:      //add embargo token to selected supply pile
      550: 1413:      s->embargoTokens[c1]++;
        -: 1414:			
        -: 1415:      //trash card
      550: 1416:      discardCard(hp, cp, s, 1);		
      550: 1417:      return 0;
        -: 1418:		
        -: 1419:}
        -: 1420:
        -: 1421:
        -: 1422:
     5849: 1423:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1424:{
        -: 1425:	
        -: 1426:  //if card is not trashed, added to Played pile 
     5849: 1427:  if (trashFlag < 1)
        -: 1428:    {
        -: 1429:      //add card to played pile
     5299: 1430:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5299: 1431:      state->playedCardCount++;
        -: 1432:    }
        -: 1433:	
        -: 1434:  //set played card to -1
     5849: 1435:  state->hand[currentPlayer][handPos] = -1;
        -: 1436:	
        -: 1437:  //remove card from player's hand
     5849: 1438:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1439:    {
        -: 1440:      //reduce number of cards in hand
     1143: 1441:      state->handCount[currentPlayer]--;
        -: 1442:    }
     4706: 1443:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1444:    {
        -: 1445:      //reduce number of cards in hand
    #####: 1446:      state->handCount[currentPlayer]--;
        -: 1447:    }
        -: 1448:  else 	
        -: 1449:    {
        -: 1450:      //replace discarded card with last card in hand
     4706: 1451:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1452:      //set last card to -1
     4706: 1453:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1454:      //reduce number of cards in hand
     4706: 1455:      state->handCount[currentPlayer]--;
        -: 1456:    }
        -: 1457:	
     5849: 1458:  return 0;
        -: 1459:}
        -: 1460:
    #####: 1461:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1462:{
        -: 1463:  //Note: supplyPos is enum of choosen card
        -: 1464:	
        -: 1465:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1466:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1467:    {
    #####: 1468:      return -1;
        -: 1469:    }
        -: 1470:	
        -: 1471:  //added card for [whoseTurn] current player:
        -: 1472:  // toFlag = 0 : add to discard
        -: 1473:  // toFlag = 1 : add to deck
        -: 1474:  // toFlag = 2 : add to hand
        -: 1475:
    #####: 1476:  if (toFlag == 1)
        -: 1477:    {
    #####: 1478:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1479:      state->deckCount[player]++;
        -: 1480:    }
    #####: 1481:  else if (toFlag == 2)
        -: 1482:    {
    #####: 1483:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1484:      state->handCount[player]++;
        -: 1485:    }
        -: 1486:  else
        -: 1487:    {
    #####: 1488:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1489:      state->discardCount[player]++;
        -: 1490:    }
        -: 1491:	
        -: 1492:  //decrease number in supply pile
    #####: 1493:  state->supplyCount[supplyPos]--;
        -: 1494:	 
    #####: 1495:  return 0;
        -: 1496:}
        -: 1497:
     5000: 1498:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1499:{
        -: 1500:  int i;
        -: 1501:	
        -: 1502:  //reset coin count
     5000: 1503:  state->coins = 0;
        -: 1504:
        -: 1505:  //add coins for each Treasure card in player's hand
    24100: 1506:  for (i = 0; i < state->handCount[player]; i++)
        -: 1507:    {
    19100: 1508:      if (state->hand[player][i] == copper)
        -: 1509:	{
    14641: 1510:	  state->coins += 1;
        -: 1511:	}
     4459: 1512:      else if (state->hand[player][i] == silver)
        -: 1513:	{
    #####: 1514:	  state->coins += 2;
        -: 1515:	}
     4459: 1516:      else if (state->hand[player][i] == gold)
        -: 1517:	{
    #####: 1518:	  state->coins += 3;
        -: 1519:	}	
        -: 1520:    }	
        -: 1521:
        -: 1522:  //add bonus
     5000: 1523:  state->coins += bonus;
        -: 1524:
     5000: 1525:  return 0;
        -: 1526:}
        -: 1527:
        -: 1528:
        -: 1529://end of dominion.c
        -: 1530:
